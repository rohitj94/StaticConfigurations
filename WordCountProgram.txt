import java.io.IOException;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.io.IntWritable;
import java.lang.Iterable;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.util.Tool;

public class WordCount extends Configured implements Tool
{
	
	static class WordCountMapper extends Mapper<LongWritable,Text,Text,IntWritable>
	{
		protected Text outputKey = new Text();
		protected IntWritable occur = new IntWritable(1);
		
		protected void map(LongWritable key, Text value, Context context) throws InterruptedException, IOException
		{
			   String[] values = value.toString().split(" ");
				for(String word : values)
					{
					  if(word.length() < Integer.parseInt(context.getConfiguration().get("min.word.length")))
      					{  continue; }
		   		  	    outputKey.set(word);
		   		  	    context.write(outputKey, occur);
					}
		}
	}
	static class WordCountReducer extends Reducer<Text, IntWritable, Text, IntWritable>
	{
		
		protected void reduce(Text key, Iterable<IntWritable> words, Context context) 
				throws IOException, InterruptedException
		{  
			int sum = 0;
			
			for(IntWritable value : words)
			{
				sum = sum + value.get(); 
			}
			
			context.write(key, new IntWritable(sum));
		}
	}
	
	public int run(String[] args) throws Exception
	{
		Configuration conf = new Configuration();
		conf.set("min.word.length", "3");
		Job job = new Job(conf, "StaticConfigurations");
		
		job.setJarByClass(WordCount.class);
		
		job.setMapperClass(WordCountMapper.class);
		job.setReducerClass(WordCountReducer.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntWritable.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
        	
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		
		return job.waitForCompletion(true)? 0 : 1;
	}
	
	public static void main(String args[]) throws Exception
	{
		//Logger log = Logger.getLogger(CCounter.);
		int exitcode = ToolRunner.run(new WordCount(), args);
		System.exit(exitcode);
	}
}
